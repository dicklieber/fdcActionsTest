
akka {
  loglevel = DEBUG
  log-config-on-start = off
  actor {
    debug {
      lifecycle = on
      receive = on
      autoreceive = off
    }
  }
}

instance = 1
instance = ${instance}
directory = ${user.home}/fdcluster${instance}
log = ${directory}/logs/fdcluster.log

someduration = 20 seconds

contest {
  schedule {
    month = DECEMBER
    algorithm = last   // [last|fourth]
    duration = 24h
    startTime = "19:00"
  }


  contestNames = ["WinterFieldDay", "FieldDay"] // Must match filenames in resources/contests
  contestName = "undefined" // override in WinterFieldDay.conf and FieldDa.conf
  contestURL = ""
  bands = [
    // frequency in MHz
    "160m: 1.800 to  2.000"
    "80m: 3.500 to  4.000"
    "40m: 7.000 to  7.300"
    "20m: 14.000 to  14.350"
    "15m: 21.000 to  21.450"
    "10m: 28.000 to  29.700"
    "6m: 50.000 to  54.000"
    "2m: 144.100 to  148.000"
    "1.25m: 222 to  225"
    "70cm: 420.000 to  450.000"
  ]
  modes {
    // contestMode = rig modes
    PH = "AM FM SSB USB LSB"
    CW = "CW"
    DI = "*" // * anything else
  }
  categories = [
    "H: Home",
    "I: Indoor",
    "O: Outdoor",
  ]


  rules: [
    {
      name = "100% emergency"
      description = """100 points per transmitter classification if all contacts are made only using an emergency power
source up to a total of 20 transmitters (maximum 2,000 points)."""
      points-per = 100
      max-points = 2000
      per = transmitter
      categories = ABCE
    },
    {
      name = "Media Publicity"
      description = """100 bonus points may be earned for attempting to obtain publicity from the local media"""
      pointsPer = 100
    }
  ]

}

fdcluster {
  //  journal = ${directory}/journal.log
  //  logDir = ${directory}/log
  //  logFile = ${fdcluster.logDir}/fdcluster.log
  //  var = ${directory}/var

  multicast {
    group = "239.73.88.0"
    port = 1174
    timeout = 20 s
  }
  cluster {
    nodeStatusLife = 30 s
  }
  http {
    port = 808${instance} // api to allow one node to get info from another.
  }
  prettyPrintJson = yes // yes to make human readable (developemnt) json in rest API responses no is compact (contest time)
  cabrillo {
    fields = [
      // Combo:<label> <cabriloField>  [ [<choice>*|$[bands|modes]]  = prefix for default choice
      // [Text|TexArea](<label> <cabriloField>
      "Combo: Operator CATEGORY-OPERATOR [ +SINGLE-OP MULTI-OP CHECKLOG]"
      "Combo: Station CATEGORY-STATION [DISTRIBUTED  +FIXED MOBILE PORTABLE ROVER ROVER-LIMITED ROVER-UNLIMITED EXPEDITION HQ SCHOOL]"
      "Combo:Transmitter CATEGORY-TRANSMITTER [ONE TWO LIMITED +UNLIMITED SWL]"
      "Combo:Power CATEGORY-POWER [HIGH +LOW QRP]"
      "Text: Club CLUB"
      "Combo:Assisted CATEGORY-ASSISTED [ASSISTED +NON-ASSISTED]"
      "Combo: Band CATEGORY-BAND [$bands]"
      "Combo: Mode CATEGORY-MODE [$modes]"
      "Text: Operators OPERATORS"
      "Text: Name NAME"
      "TextArea: Address ADDRESS"
      "Text: City ADDRESS-CITY"
      "Text: State/Prov ADDRESS-STATE-PROVINCE"
      "Text: Zip/PostCode ADDRESS-POSTALCODE"
      "Text: Country ADDRESS-COUNTRY"
    ]
  }

  rig {
    // rig settings are node-specific and not sent to the cluster.
    // hamlib: see https://github.com/Hamlib/Hamlib
    // rigctld: see http://manpages.ubuntu.com/manpages/xenial/man8/rigctld.8.html
    // <modelId> and <deviceName> are substitutedbase on the Rig dialog info provlide by th user.
    rigctldApp = rigctld
    // start the deamon.
    launchRigctld =  ${fdcluster.rig.rigctldApp} -m <modelId>  -s <speed> -r <deviceName>
    // these simply run rigctld and look at it's stdout.
    rigList = ${fdcluster.rig.rigctldApp} -l
    rigctldVersion = ${fdcluster.rig.rigctldApp} --version
  }
}
